version: '3.8'

services:
  # Main Voice Translator Node.js Application
  voice-translator:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - voice_translator_data:/app/data
      - ./public:/app/public
    depends_on:
      postgres:
        condition: service_healthy
      ollama:
        condition: service_started
    environment:
      - NODE_ENV=production
      - PORT=3000
      - PG_HOST=postgres
      - PG_PORT=5432
      - PG_DATABASE=translation_memory
      - PG_USER=postgres
      - PG_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - OLLAMA_HOST=http://ollama:11434
      - OLLAMA_MODEL=${OLLAMA_MODEL:-deepseek-r1:8b}
    networks:
      - translator_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # PostgreSQL Database for Translation Memory
  postgres:
    image: postgres:17-alpine
    restart: unless-stopped
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/config/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=translation_memory
    networks:
      - translator_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Ollama for Local LLM Translation
  ollama:
    image: ollama/ollama:latest
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama_models:/root/.ollama
    networks:
      - translator_network
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: [gpu]
              count: all
              driver: nvidia
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Streamlit Web Interface
  streamlit:
    build:
      context: .
      dockerfile: Dockerfile.streamlit
    restart: unless-stopped
    ports:
      - "8501:8501"
    depends_on:
      voice-translator:
        condition: service_healthy
    environment:
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_HEADLESS=true
      - TRANSLATOR_SERVER_URL=http://voice-translator:3000
    networks:
      - translator_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - translator_network
    depends_on:
      - voice-translator

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "3001:3000"
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - translator_network
    depends_on:
      - prometheus

networks:
  translator_network:
    driver: bridge

volumes:
  voice_translator_data:
  postgres_data:
  ollama_models:
  prometheus_data:
  grafana_data:
